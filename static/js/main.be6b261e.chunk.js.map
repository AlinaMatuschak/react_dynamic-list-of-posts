{"version":3,"sources":["api/api.js","api/posts.js","components/Loader/Loader.jsx","components/Post/Post.jsx","props/PostProps.js","components/PostsList/PostsList.jsx","props/PostsListProps.js","components/Comment/Comment.jsx","props/CommentsProps.js","props/CommentProps.js","components/Comments/Comments.jsx","components/NewCommentForm/NewCommentForm.jsx","props/NewCommentFormProps.js","components/PostDetails/PostDetails.jsx","props/PostDetailsProps.js","components/SelectUser/SelectUser.jsx","props/SelectUserProps.js","App.jsx","index.js"],"names":["BASE_URL","request","url","a","option","method","fetch","response","ok","Error","statusText","json","result","data","getUserPosts","userId","posts","filter","currentPost","getPostDetails","postId","getPostComments","comments","comment","deletePostComment","commentId","postComment","body","headers","JSON","stringify","post","Loader","className","Post","PropTypes","number","isRequired","string","oneOfType","object","func","id","title","setPostId","type","onClick","useCallback","PostsList","useState","setPosts","isLoading","setIsLoading","useEffect","currentIsLoading","postsFromServer","console","warn","fetchData","map","key","Comment","arrayOf","shape","removeComment","Comments","isVisibleComments","setIsVisibleComments","commentsLength","useMemo","length","handleClick","isVisible","NewCommentForm","addComment","defaultComment","name","email","commentProperties","setCommentProperties","handleChange","target","value","properties","handleSubmit","event","preventDefault","onSubmit","placeholder","onChange","PostDetails","setPost","setComments","error","setError","dataDetails","dataComments","message","err","newComment","currentComments","SelectUser","setUserId","App","selectedPostId","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be6b261e.chunk.js","sourcesContent":["/* eslint-disable no-console */\nexport const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(url, option = { method: 'GET' }) => {\n  const response = await fetch(`${BASE_URL}${url}`, option);\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n\n  const result = await response.json();\n\n  return result.data;\n};\n\nexport const remove = id => request(\n  `/comments/${id}`,\n  { method: 'DELETE' },\n);\n\nexport const post = body => request(\n  '/comments',\n  {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(body),\n  },\n);\n","import { remove, request, post } from './api';\n\nexport function getAllPosts() {\n  return request('/posts');\n}\n\nexport async function getUserPosts(userId) {\n  const posts = await request('/posts');\n\n  return posts.filter(currentPost => currentPost.userId === userId);\n}\n\nexport function getPostDetails(postId) {\n  return request(`/posts/${postId}`);\n}\n\nexport async function getPostComments(postId) {\n  const comments = await request('/comments');\n\n  return comments\n    .filter(comment => comment.postId === postId);\n}\n\nexport function deletePostComment(commentId) {\n  return remove(commentId);\n}\n\nexport function postComment(body) {\n  return post(body);\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback } from 'react';\nimport { ProstProps } from '../../props/PostProps';\n\nexport const Post = ({ id, userId, title, postId, setPostId }) => (\n  <>\n    <div>\n      <b>{`[User #${userId}]: `}</b>\n      {title}\n    </div>\n    <button\n      type=\"button\"\n      className=\"PostsList__button button\"\n      onClick={useCallback(\n        () => {\n          postId === id\n            ? setPostId(null)\n            : setPostId(id);\n        },\n        [id, postId, setPostId],\n      )}\n    >\n      {postId === id ? 'Close' : 'Open'}\n    </button>\n  </>\n);\n\nPost.propTypes = ProstProps;\n","import PropTypes from 'prop-types';\n\nexport const ProstProps = {\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  postId: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  setPostId: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { getAllPosts, getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader/Loader';\nimport { Post } from '../Post/Post';\n\nimport { ProstsListProps } from '../../props/PostsListProps';\nimport './PostsList.scss';\n\nexport const PostsList = ({ userId, postId, setPostId }) => {\n  const [posts, setPosts] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(\n    () => {\n      const fetchData = async() => {\n        try {\n          setIsLoading(currentIsLoading => !currentIsLoading);\n\n          const postsFromServer = userId\n            ? await getUserPosts(userId)\n            : await getAllPosts();\n\n          setPosts(postsFromServer);\n          setIsLoading(currentIsLoading => !currentIsLoading);\n        } catch (error) {\n          setPosts([]);\n          setIsLoading(false);\n          // eslint-disable-next-line no-console\n          console.warn(error);\n        }\n      };\n\n      fetchData();\n    },\n    [userId],\n  );\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {isLoading\n        ? <Loader />\n        : (\n          <ul className=\"PostsList__list\">\n            {posts\n              ? posts.map(post => (\n                <li\n                  className=\"PostsList__item\"\n                  key={post.id}\n                >\n                  <Post\n                    id={post.id}\n                    userId={post.userId}\n                    title={post.title}\n                    postId={postId}\n                    setPostId={setPostId}\n                  />\n                </li>\n              ))\n              : <p>No posts</p>\n            }\n          </ul>\n        )\n      }\n    </div>\n  );\n};\n\nPostsList.propTypes = ProstsListProps;\n","import PropTypes from 'prop-types';\n\nexport const ProstsListProps = {\n  userId: PropTypes.number.isRequired,\n  postId: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  setPostId: PropTypes.func.isRequired,\n};\n","import React, { useCallback } from 'react';\nimport { CommentProps } from '../../props/CommentProps';\n\nexport const Comment = ({ body, id, removeComment }) => (\n  <>\n    <button\n      type=\"button\"\n      className=\"PostDetails__remove-button button\"\n      onClick={useCallback(\n        () => {\n          removeComment(id);\n        },\n        [id, removeComment],\n      )}\n    >\n      X\n    </button>\n    <p>{body}</p>\n  </>\n);\n\nComment.propTypes = CommentProps;\n","import PropTypes from 'prop-types';\n\nexport const CommentsProps = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      body: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  removeComment: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const CommentProps = {\n  body: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  removeComment: PropTypes.func.isRequired,\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { CommentsProps } from '../../props/CommentsProps';\nimport { Comment } from '../Comment';\n\nexport const Comments = ({ comments, removeComment }) => {\n  const [isVisibleComments, setIsVisibleComments] = useState(false);\n  const commentsLength = useMemo(\n    () => comments.length,\n    [comments],\n  );\n\n  const handleClick = useCallback(\n    () => {\n      setIsVisibleComments(isVisible => !isVisible);\n    },\n    [],\n  );\n\n  if (!commentsLength) {\n    return <p>No comments</p>;\n  }\n\n  return (\n    <section className=\"PostDetails__comments\">\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={handleClick}\n      >\n        {\n          isVisibleComments\n            ? `Hide ${commentsLength} comments`\n            : `Show ${commentsLength} comments`\n        }\n      </button>\n\n      {isVisibleComments && (\n        <ul className=\"PostDetails__list\">\n          {comments.map(({ body, id }) => (\n            <li className=\"PostDetails__list-item\" key={id}>\n              <Comment\n                body={body}\n                id={id}\n                removeComment={removeComment}\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n    </section>\n  );\n};\n\nComments.propTypes = CommentsProps;\n","import React, { useCallback, useState } from 'react';\nimport { NewCommentFormProps } from '../../props/NewCommentFormProps';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ addComment }) => {\n  const defaultComment = {\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [commentProperties, setCommentProperties] = useState(defaultComment);\n\n  const handleChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n\n      setCommentProperties(properties => ({\n        ...properties,\n        [name]: value,\n      }));\n    },\n    [],\n  );\n\n  const handleSubmit = useCallback(\n    (event) => {\n      event.preventDefault();\n\n      addComment(commentProperties);\n\n      setCommentProperties(defaultComment);\n    },\n    [addComment, commentProperties, defaultComment],\n  );\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={commentProperties.name}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={commentProperties.email}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={commentProperties.body}\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = NewCommentFormProps;\n","import PropTypes from 'prop-types';\n\nexport const NewCommentFormProps = {\n  addComment: PropTypes.func.isRequired,\n};\n","/* eslint-disable no-console */\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport {\n  getPostComments,\n  getPostDetails,\n  deletePostComment,\n  postComment,\n} from '../../api/posts';\n\nimport { Comments } from '../Comments';\nimport { Loader } from '../Loader/Loader';\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport { PostDetailsProps } from '../../props/PostDetailsProps';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState({ body: '' });\n  const [comments, setComments] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(\n    () => {\n      const fetchData = async() => {\n        try {\n          setIsLoading(currentIsLoading => !currentIsLoading);\n\n          const dataDetails = await getPostDetails(postId);\n          const dataComments = await getPostComments(postId);\n\n          setPost(dataDetails);\n          setComments(dataComments);\n\n          setIsLoading(currentIsLoading => !currentIsLoading);\n        } catch (err) {\n          setError(err.message);\n        }\n      };\n\n      fetchData();\n    },\n    [postId],\n  );\n\n  const removeComment = useCallback(\n    async(commentId) => {\n      try {\n        deletePostComment(commentId);\n\n        setComments(comments.filter(comment => comment.id !== commentId));\n      } catch (err) {\n        console.warn(err);\n      }\n    },\n    [comments],\n  );\n\n  const addComment = useCallback(\n    async(comment) => {\n      try {\n        const newComment = await postComment({\n          postId: post.id,\n          ...comment,\n        });\n\n        setComments(currentComments => [...currentComments, newComment]);\n      } catch (err) {\n        console.warn(err);\n      }\n    },\n    [post],\n  );\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {\n        isLoading\n          ? <Loader />\n          : (\n            <>\n              <section className=\"PostDetails__post\">\n                <p>{post.body}</p>\n              </section>\n\n              {comments && (\n                <Comments\n                  comments={comments}\n                  removeComment={removeComment}\n                />\n              )}\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm addComment={addComment} />\n                </div>\n              </section>\n            </>\n          )\n      }\n    </div>\n  );\n};\n\nPostDetails.propTypes = PostDetailsProps;\n","import PropTypes from 'prop-types';\n\nexport const PostDetailsProps = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useCallback } from 'react';\nimport { SelectUserProps } from '../../props/SelectUserProps';\n\nexport const SelectUser = ({ userId, setUserId }) => (\n  <label>\n    Select a user: &nbsp;\n\n    <select\n      className=\"App__user-selector\"\n      value={userId}\n      onChange={useCallback(\n        ({ target }) => {\n          setUserId(+target.value);\n        },\n        [setUserId],\n      )}\n    >\n      <option value=\"0\">All users</option>\n      <option value=\"1\">Leanne Graham</option>\n      <option value=\"2\">Ervin Howell</option>\n      <option value=\"3\">Clementine Bauch</option>\n      <option value=\"4\">Patricia Lebsack</option>\n      <option value=\"5\">Chelsey Dietrich</option>\n      <option value=\"6\">Mrs. Dennis Schulist</option>\n      <option value=\"7\">Kurtis Weissnat</option>\n      <option value=\"8\">Nicholas Runolfsdottir V</option>\n      <option value=\"9\">Glenna Reichert</option>\n      <option value=\"10\">Leanne Graham</option>\n    </select>\n  </label>\n);\n\nSelectUser.propTypes = SelectUserProps;\n","import PropTypes from 'prop-types';\n\nexport const SelectUserProps = {\n  userId: PropTypes.number.isRequired,\n  setUserId: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { SelectUser } from './components/SelectUser';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App = () => {\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <SelectUser\n          userId={userId}\n          setUserId={setUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={userId}\n            postId={selectedPostId}\n            setPostId={setSelectedPostId}\n          />\n        </div>\n\n        {selectedPostId && (\n          <div className=\"App__content\">\n            <PostDetails postId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}